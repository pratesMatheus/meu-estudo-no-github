"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hashJs = require("hash.js");
var js_base64_1 = require("js-base64");
function canonicalizeJwk(jwk) {
    switch (jwk.kty) {
        case "RSA":
            return {
                e: jwk.e,
                kty: jwk.kty,
                n: jwk.n,
            };
        case "EC":
            return {
                crv: jwk.crv,
                kty: jwk.kty,
                x: jwk.x,
                y: jwk.y
            };
        case "oct":
            return {
                k: jwk.k,
                kty: jwk.kty,
            };
        default:
            return undefined;
    }
}
exports.canonicalizeJwk = canonicalizeJwk;
function jwkThumbprintByEncoding(jwk, hashAlg, ec) {
    var canonicalJwk = canonicalizeJwk(jwk);
    if (canonicalJwk === undefined) {
        return undefined;
    }
    var jsonStr = JSON.stringify(canonicalJwk, Object.keys(canonicalJwk).sort());
    var digest = (function () {
        switch (hashAlg) {
            case "SHA-256":
                return hashJs.sha256().update(jsonStr);
            case "SHA-512":
                return hashJs.sha512().update(jsonStr);
            default:
                throw new Error("Unexpected error: unknown algorithm: " + hashAlg);
        }
    })();
    switch (ec) {
        case 'numbers':
            return digest.digest();
        case 'hex':
            return digest.digest('hex');
        case "uint8array":
            return new Uint8Array(digest.digest());
        case 'base64url':
            var binStr = digest.digest().map(function (b) { return String.fromCharCode(b); }).join("");
            return js_base64_1.Base64.btoa(binStr)
                .replace(/=/g, "")
                .replace(/\+/g, "-")
                .replace(/\//g, "_");
        default:
            throw new Error("Unexpected encoding: " + ec);
    }
}
exports.jwkThumbprintByEncoding = jwkThumbprintByEncoding;
function jwkThumbprint(jwk, hashAlg) {
    return jwkThumbprintByEncoding(jwk, hashAlg, 'uint8array');
}
exports.jwkThumbprint = jwkThumbprint;
//# sourceMappingURL=index.js.map