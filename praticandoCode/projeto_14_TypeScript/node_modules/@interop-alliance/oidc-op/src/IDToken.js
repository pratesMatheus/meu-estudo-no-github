/* eslint-disable camelcase */
'use strict'

/**
 * Local dependencies
 */
const { JWT } = require('@solid/jose')
const { hashClaim, random } = require('./crypto')

const DEFAULT_MAX_AGE = 1209600 // Default ID token expiration, in seconds
const DEFAULT_SIG_ALGORITHM = 'RS256'

/**
 * IDToken
 */
class IDToken extends JWT {
  /**
   * issue
   *
   * @param provider {Provider} OIDC Identity Provider issuing the token
   * @param provider.issuer {string} Provider URI
   * @param provider.keys {KeyChain}
   *
   * @param options {Object}
   * @param options.aud {string|Array<string>} Audience for the token
   *   (such as the Relying Party client_id)
   * @param options.azp {string} Authorized party / Presenter (RP client_id)
   * @param options.sub {string} Subject id for the token (opaque, unique to
   *   the issuer)
   * @param options.nonce {string} Nonce generated by Relying Party
   *
   * Optional:
   * @param [options.alg] {string} Algorithm for signing the id token
   * @param [options.jti] {string} Unique JWT id (to prevent reuse)
   * @param [options.iat] {number} Issued at timestamp (in seconds)
   * @param [options.max] {number} Max token lifetime in seconds
   * @param [options.at_hash] {string} Access Token Hash
   * @param [options.c_hash] {string} Code hash
   * @param [options.cnf] {Object} Proof of Possession confirmation key, see
   *   https://tools.ietf.org/html/rfc7800#section-3.1
   *
   * @returns {IDToken} ID Token (JWT instance)
   */
  static issue (provider, options) {
    const { issuer, keys } = provider

    const { aud, azp, sub, nonce, at_hash, c_hash, cnf } = options

    const alg = options.alg || DEFAULT_SIG_ALGORITHM
    const jti = options.jti || random(8)
    const iat = options.iat || Math.floor(Date.now() / 1000)
    const max = options.max || DEFAULT_MAX_AGE

    const exp = iat + max // token expiration

    const iss = issuer
    const key = keys.id_token.signing[alg].privateKey
    const kid = keys.id_token.signing[alg].publicJwk.kid

    const header = { alg, kid }
    const payload = { iss, aud, azp, sub, exp, iat, jti, nonce }

    if (at_hash) { payload.at_hash = at_hash }
    if (c_hash) { payload.c_hash = c_hash }
    if (cnf) { payload.cnf = cnf }

    const jwt = new IDToken({ header, payload, key })

    return jwt
  }

  /**
   * issueForRequest
   */
  static async issueForRequest (request, response) {
    const { params, code, provider, client, subject } = request

    const alg = client.id_token_signed_response_alg || DEFAULT_SIG_ALGORITHM
    const jti = random(8)
    const iat = Math.floor(Date.now() / 1000)
    let aud, azp, sub, max, nonce

    // authentication request
    if (!code) {
      aud = client.client_id
      azp = client.client_id
      sub = subject._id
      max = parseInt(params.max_age) || client.default_max_age || DEFAULT_MAX_AGE
      nonce = params.nonce

    // token request
    } else {
      aud = code.aud
      azp = code.azp || aud
      sub = code.sub
      max = parseInt(code.max) || client.default_max_age || DEFAULT_MAX_AGE
      nonce = code.nonce
    }

    const len = alg.match(/(256|384|512)$/)[0]

    // generate hashes
    const [at_hash, c_hash] = await Promise.all([
      hashClaim(response.access_token, len),
      hashClaim(response.code, len)
    ])
    const options = {
      alg, aud, max, azp, sub, iat, jti, nonce, at_hash, c_hash
    }

    if (request.cnfKey) {
      options.cnf = { jwk: request.cnfKey }
    }

    // build the id_token
    const jwt = IDToken.issue(provider, options)

    response.id_token = await jwt.encode() // sign id token, compact

    return response
  }
}

IDToken.DEFAULT_MAX_AGE = DEFAULT_MAX_AGE
IDToken.DEFAULT_SIG_ALGORITHM = DEFAULT_SIG_ALGORITHM

/**
 * Export
 */
module.exports = IDToken
